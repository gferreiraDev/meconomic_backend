generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  firstName String
  lastName String
  email String @unique
  document String @unique
  phone String
  password String
  resetToken String?
  isValidated Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  statements Statement[]
  cards Card[]
  transactions Transaction[]
}

model Statement {
  id String @id @default(uuid())
  type String
  category String
  subcategory String?
  description String
  expectedValue Float
  dueDay Int
  installments Int
  months Month[]
  userId String
  user User @relation(fields: [userId], references: [id])
  transactions Transaction[]
  card Card?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Month {
  id Int @id @default(autoincrement())
  month String
  label String
  checked Boolean
  statement Statement @relation(fields: [statementId], references: [id])
  statementId String
}

model Card {
  id String @id @default(uuid())
  brand String
  name String
  lastNumbers String @unique
  limit Float
  currentLimit Float
  closingDay Int
  dueDay Int
  annuity Float
  fees Float
  chargeRule String
  expiryDate String
  status String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  user User @relation(fields: [userId], references: [id])
  statement Statement @relation(fields: [statementId], references: [id])
  statementId String @unique
}

model Transaction {
  id String @id @default(uuid())
  type String
  category String
  subcategory String?
  description String
  value Float
  dueDate DateTime
  payDate DateTime
  installments Int
  installment Int
  status String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  user User @relation(fields: [userId], references: [id])
  statementId String?
  statement Statement? @relation(fields: [statementId], references: [id], onDelete: Cascade)
}